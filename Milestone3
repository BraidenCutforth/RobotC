#pragma config(Sensor, in1,    IRSensorR,      sensorReflection)
#pragma config(Sensor, dgtl1,  Button1,        sensorTouch)
#pragma config(Sensor, dgtl2,  Button2,        sensorTouch)
#pragma config(Sensor, dgtl3,  RedLed1,        sensorDigitalOut)
#pragma config(Sensor, dgtl11, rangeFidner,    sensorSONAR_cm)
#pragma config(Motor,  port1,           Arm,           tmotorVex393_HBridge, openLoop)
#pragma config(Motor,  port2,           Left,          tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port3,           Right,         tmotorVex393_MC29, openLoop, reversed)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

bool btn1 = false;
bool btn2 = false;
bool targetFound;

const int IR_Sensor_Threshold = 500;
const int on = 1;
const int off = 0;

/*This checkInput function was based off of the code from lab #2
Only the variable names were changed by our team.
*/

void checkInput(){
	if (SensorValue(Button1) && !btn1){
		btn1 = true;
	}
	if (SensorValue(Button2) && !btn2){
		btn2 = true;
	}
}

/* function to turn the robot left*/

void leftTurn(){
			motor[Left] = -50;
			motor[Right] = 50;
			delay(670);
			motor[Left] = 0;
			motor[Right] = 0;
}

/*function to turn the robot right*/

void rightTurn(){
			motor[Left] = 50;
			motor[Right] = -50;
			delay(670);
			motor[Left] = 0;
			motor[Right] = 0;	
}

bool targetSearch(){
			if (sensorValue[IRSensorR] == /*Some Value*/ && sensorValue[IRSensorL] == /*Same Value*/){
				return true;
		}
			else
}
task main(){
	while(true){
		
	
		/*checkInput();
		if (SensorValue[IRSensorR]>IR_Sensor_Threshold){
			SensorValue(RedLed1) = on;
			}
			else{
				SensorValue(RedLed1) = off;
			}
	if(targetFound == true){
	//turn on an LED		
	}//if
	*/
}//while true loop


}//task main
